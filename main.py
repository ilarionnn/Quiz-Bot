import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.filters.command import Command

from question import quiz_data
from config import API_TOKEN, DB_NAME
from database import get_quiz_index, get_user_score, update_quiz_index, update_user_score, create_table, get_all_users_scores

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

def generate_options_keyboard(answer_options, right_answer_index):
    builder = InlineKeyboardBuilder()

    for i, option in enumerate(answer_options):
        # –°–æ–∑–¥–∞–µ–º callback_data —Å –∏–Ω–¥–µ–∫—Å–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞
        callback_data = f"answer_{i}"
        builder.add(types.InlineKeyboardButton(
            text=option,
            callback_data=callback_data)
        )

    builder.adjust(1)
    return builder.as_markup()

@dp.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    selected_index = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    current_question_index = await get_quiz_index(callback.from_user.id)
    current_question = quiz_data[current_question_index]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    selected_answer = current_question['options'][selected_index]
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
    await callback.message.answer(f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if selected_index == current_question['correct_option']:
        await callback.message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
        current_score = await get_user_score(callback.from_user.id)
        current_score += 1
        await update_user_score(callback.from_user.id, current_score)
    else:
        correct_answer = current_question['options'][current_question['correct_option']]
        await callback.message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_question_index += 1
    await update_quiz_index(callback.from_user.id, current_question_index)
    
    current_score = await get_user_score(callback.from_user.id)
    
    if current_question_index < len(quiz_data):
        await get_question(callback.message, callback.from_user.id)
    else:
        await callback.message.answer(f"–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! \n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {current_score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")



async def cmd_stats(message: types.Message):
    #–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_stats = await get_all_users_scores()
    
    if not all_stats:
        await message.answer("üìä –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª –≤ –∫–≤–∏–∑!")
        return
    
    stats_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    
    for i, (user_id, score) in enumerate(all_stats, 1):
        stats_text += f"{i}. ID {user_id} - {score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –æ–≥—Ä–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if i >= 10:
            stats_text += "\n... –∏ –¥—Ä—É–≥–∏–µ"
            break
    
    await message.answer(stats_text)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    builder.add(types.KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    builder.adjust(2)
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/quiz - –ù–∞—á–∞—Ç—å –∫–≤–∏–∑\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤\n"
        "/help - –ü–æ–º–æ—â—å",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

dp.message.register(cmd_stats, Command("stats"))
dp.message.register(cmd_stats, F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

async def get_question(message, user_id):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_question_index = await get_quiz_index(user_id)
    correct_index = quiz_data[current_question_index]['correct_option']
    opts = quiz_data[current_question_index]['options']
    kb = generate_options_keyboard(opts, opts[correct_index])
    await message.answer(f"{quiz_data[current_question_index]['question']}", reply_markup=kb)


async def new_quiz(message):
    user_id = message.from_user.id
    current_question_index = 0
    new_score=0
    await update_quiz_index(user_id, current_question_index)
    await update_user_score(user_id, new_score)
    await get_question(message, user_id)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /quiz
@dp.message(F.text=="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
@dp.message(Command("quiz"))
async def cmd_quiz(message: types.Message):

    await message.answer(f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    await new_quiz(message)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@dp.message(Command("help"))
async def cmd_start(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/start - –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n/help - –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–º–æ—â—å\n/quiz - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")

async def delete_webhook():
    ###!!!–£–¥–∞–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±—Ö—É–∫
    bot = Bot(token=API_TOKEN)
    await bot.delete_webhook()
    await bot.session.close()

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await delete_webhook()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await create_table()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())